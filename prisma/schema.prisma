// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ROLE_SUPER_ADMIN
  ROLE_SELLER
  ROLE_AFFILIATE
  ROLE_SELLER_ADMIN
}

enum Currency {
  NGN
  GHS
  KES
  RWF
}

enum Country {
  NG
  GH
  KE
  RW
}

enum TransactionType {
  SUBSCRIPTION
  PRODUCT_PURCHASE
  STORE_WITHDRAWAL
  AFFILIATE_WITHDRAWAL
}

enum ChargeType {
  DEBIT
  CREDIT
}

enum SubscriptionPlan {
  AFFILIATE_DEFAULT
}

enum TransactionStatus {
  initiated
  success
  failed
  pending
}

enum PaymentProcessor {
  FLUTTERWAVE
  COINBASE
}

enum AuditLogActionType {
  DELETE
  UPDATE
}

model UserRole {
  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  role Role

  @@id([userId, role], name: "userRole")
  @@map("user_has_role")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique

  firstName      String
  lastName       String?
  username       String
  keycloakUserId String

  seller                Seller?
  affiliate             Affiliate?
  userRoles             UserRole[]
  confirmationToken     ConfirmationToken[]
  initiatedTransactions Transaction[]       @relation("InitiatedTransactions")
  referredTransactions  Transaction[]       @relation("ReferredTransactions")
  actionLogs            AuditLog[]

  @@map("user")
}

model Seller {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phoneNumber  String
  active       Boolean @default(false)
  businessName String
  address      String
  totalEarning Decimal @default(0) @db.Decimal(25, 2)

  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  stores Store[]

  @@map("seller")
}

model Affiliate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phoneNumber     String
  affiliateCode   String
  totalEarnings   Decimal          @default(0) @db.Decimal(25, 2)
  amountWithdrawn Decimal          @default(0) @db.Decimal(25, 2)
  balance         Decimal          @default(0) @db.Decimal(25, 2)
  active          Boolean          @default(false)
  plan            SubscriptionPlan @default(AFFILIATE_DEFAULT)

  bankDetails Bank?

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  referredUsers Affiliate[] @relation("ReferredAffiliates")

  referredBy     Int?
  referredByUser Affiliate? @relation("ReferredAffiliates", fields: [referredBy], references: [id])

  subscription Subscription?

  @@map("affiliate")
}

model ConfirmationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt DateTime
  token     String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("confirmation_token")
}

model Store {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String   @unique
  country         Country  @default(NG)
  currency        Currency @default(NGN)
  totalEarning    Decimal  @default(0) @db.Decimal(25, 2)
  amountWithdrawn Decimal  @default(0) @db.Decimal(25, 2)
  balance         Decimal  @default(0) @db.Decimal(25, 2)

  bankDetails Bank?

  sellerId     Int
  owner        Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  products     Product[]
  transactions Transaction[]

  @@map("store")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type                TransactionType
  chargeType          ChargeType
  status              TransactionStatus          @default(initiated)
  paymentProcessorRef PaymentProcessorReference?
  referenceCode       String
  address             String?
  amount              Decimal                    @db.Decimal(15, 2)

  // optional because user who initiated transaction can delete his/her account
  initiatedBy     Int?
  initiatedByUser User? @relation("InitiatedTransactions", fields: [initiatedBy], references: [id])

  referredBy     Int?
  referredByUser User? @relation("ReferredTransactions", fields: [referredBy], references: [id])

  storeId Int?
  store   Store? @relation(fields: [storeId], references: [id])

  productId Int?
  product   Product? @relation(fields: [productId], references: [id])

  subscriptionId Int?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  activeForSubscription Subscription? @relation("ActiveTransaction")

  @@map("transaction")
}

model PaymentProcessorReference {
  id            Int              @id @default(autoincrement())
  trxId         String?
  referenceCode String?
  type          PaymentProcessor

  transactionId Int         @unique
  transaction   Transaction @relation(fields: [transactionId], references: [id])

  @@map("payment_processor_reference")
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  storeId      Int
  store        Store         @relation(fields: [storeId], references: [id], onDelete: Cascade)
  transactions Transaction[]

  @@map("product")
}

model Subscription {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  startDate DateTime @default(now())
  endDate   DateTime
  active    Boolean  @default(false)
  willRenew Boolean  @default(false)

  // optional because affiliate who created subscription can delete account
  affiliateId Int?       @unique
  affiliate   Affiliate? @relation(fields: [affiliateId], references: [id])

  activeTransactionId Int?         @unique
  activeTransaction   Transaction? @relation("ActiveTransaction", fields: [activeTransactionId], references: [id])

  transactions Transaction[]

  @@map("subscription")
}

model Bank {
  id            Int    @id @default(autoincrement())
  bankName      String
  accountNumber String
  bankCode      String
  accountName   String
  beneficiaryId Int

  affiliateId Int?       @unique
  affiliate   Affiliate? @relation(fields: [affiliateId], references: [id], onDelete: Cascade)

  storeId Int?   @unique
  store   Store? @relation(fields: [storeId], references: [id], onDelete: Cascade)

  @@map("bank")
}

model AuditLog {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())

  action AuditLogActionType @default(DELETE)
  content Json

  actorId Int?
  actor User? @relation(fields: [actorId], references: [id])
}
