// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ROLE_SUPER_ADMIN
  ROLE_SELLER
  ROLE_AFFILIATE
  ROLE_SELLER_ADMIN
}

enum Currency {
  NGN
  GHS
  KES
  RWF
}

model UserRole {
  userId Int
  user   User @relation(fields: [userId], references: [id])

  role Role

  @@id([userId, role], name: "userRole")
  @@map("user_has_role")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  email String @unique

  firstName      String
  lastName       String?
  username       String
  keycloakUserId String

  seller            Seller?
  affiliate         Affiliate?
  userRole          UserRole[]
  confirmationToken ConfirmationToken[]

  @@map("user")
}

model Seller {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phoneNumber  String
  active       Boolean @default(false)
  businessName String
  address      String
  totalEarning Decimal @default(0) @db.Decimal(25, 2)

  userId Int     @unique
  user   User    @relation(fields: [userId], references: [id])
  stores Store[]

  @@map("seller")
}

model Affiliate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  phoneNumber     String
  affiliateCode   String
  totalEarnings   Decimal @default(0) @db.Decimal(25, 2)
  amountWithdrawn Decimal @default(0) @db.Decimal(25, 2)
  balance         Decimal @default(0) @db.Decimal(25, 2)
  active          Boolean @default(false)

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])

  @@map("affiliate")
}

model ConfirmationToken {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  expiresAt DateTime
  token     String

  userId Int
  user   User @relation(fields: [userId], references: [id])

  @@map("confirmation_token")
}

model Store {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name            String   @unique
  bankName        String?
  accountNumber   String?
  bankCode        String?
  currency        Currency @default(NGN)
  totalEarning    Decimal  @default(0) @db.Decimal(25, 2)
  amountWithdrawn Decimal  @default(0) @db.Decimal(25, 2)
  balance         Decimal  @default(0) @db.Decimal(25, 2)

  sellerId Int
  owner    Seller    @relation(fields: [sellerId], references: [id])
  products Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name String

  storeId Int
  store   Store @relation(fields: [storeId], references: [id])
}
